(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[1],{

/***/ "../../yoroi-extension/app/config/stringConfig.js":
/*!******************************************************************************************************!*\
  !*** /home/yushi/programs/emurgo/yoroi-frontend/packages/yoroi-extension/app/config/stringConfig.js ***!
  \******************************************************************************************************/
/*! exports provided: Bech32Prefix */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Bech32Prefix\", function() { return Bech32Prefix; });\n// @flow\n\nconst Bech32Prefix = Object.freeze({\n  ADDRESS: 'addr',\n  PAYMENT_KEY_HASH: 'addr_vkh',\n});\n\n\n//# sourceURL=webpack:////home/yushi/programs/emurgo/yoroi-frontend/packages/yoroi-extension/app/config/stringConfig.js?");

/***/ }),

/***/ "./coreUtils.js":
/*!**********************!*\
  !*** ./coreUtils.js ***!
  \**********************/
/*! exports provided: bytesToHex, hexToBytes */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(Buffer) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"bytesToHex\", function() { return bytesToHex; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"hexToBytes\", function() { return hexToBytes; });\n// @flow\n\nfunction bytesToHex(bytes) {\n  return Buffer.from(bytes).toString('hex');\n}\n\nfunction hexToBytes(hex) {\n  return Buffer.from(hex, 'hex');\n}\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/buffer/index.js */ \"./node_modules/buffer/index.js\").Buffer))\n\n//# sourceURL=webpack:///./coreUtils.js?");

/***/ }),

/***/ "./index.js":
/*!******************!*\
  !*** ./index.js ***!
  \******************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(Buffer) {/* harmony import */ var _emurgo_cardano_serialization_lib_browser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @emurgo/cardano-serialization-lib-browser */ \"./node_modules/@emurgo/cardano-serialization-lib-browser/cardano_serialization_lib.js\");\n/* harmony import */ var _emurgo_cip4_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @emurgo/cip4-js */ \"./node_modules/@emurgo/cip4-js/index.js\");\n/* harmony import */ var _emurgo_cip4_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_emurgo_cip4_js__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _download_blockies__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @download/blockies */ \"./node_modules/@download/blockies/src/blockies.mjs\");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils */ \"./utils.js\");\n/* harmony import */ var _yoroi_extension_app_config_stringConfig__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../yoroi-extension/app/config/stringConfig */ \"../../yoroi-extension/app/config/stringConfig.js\");\n/* harmony import */ var _coreUtils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./coreUtils */ \"./coreUtils.js\");\n\n\n\n\n\n\n\nconst get = (selector) => document.querySelector(selector);\nconst getAll = (selector) => document.querySelectorAll(selector);\n\nconst cardanoAccessBtnRow = get(\"#request-button-row\");\nconst cardanoAuthCheck = get(\"#check-identification\");\nconst cardanoAccessBtn = get(\"#request-access\");\nconst connectionStatus = get(\"#connection-status\");\nconst walletPlateSpan = get(\"#wallet-plate\");\nconst walletIconSpan = get(\"#wallet-icon\");\nconst getUnUsedAddresses = get(\"#get-unused-addresses\");\nconst getUsedAddresses = get(\"#get-used-addresses\");\nconst getChangeAddress = get(\"#get-change-address\");\nconst getRewardAddresses = get(\"#get-reward-addresses\");\nconst getAccountBalance = get(\"#get-balance\");\nconst isEnabledBtn = get(\"#is-enabled\");\nconst getUtxos = get(\"#get-utxos\");\nconst submitTx = get(\"#submit-tx\");\nconst signTx = get(\"#sign-tx\");\nconst showUtxos = get(\"#show-utxos\");\nconst getCollateralUtxos = get(\"#get-collateral-utxos\");\nconst signData = get(\"#sign-data\");\nconst alertEl = get(\"#alert\");\nconst spinner = get(\"#spinner\");\nconst utxosContainer = get(\"#utxos\");\nconst getNFTs = get(\"#nfts\");\nconst getNetworkId = get(\"#get-network-id\");\n\nlet accessGranted = false;\nlet cardanoApi;\nlet returnType = \"cbor\";\nlet utxos;\nlet selectedUtxoIdx = 0;\nlet usedAddresses;\nlet unusedAddresses;\nlet changeAddress;\nlet unsignedTransactionHex;\nlet transactionHex;\n\nfunction isCBOR() {\n  return returnType === \"cbor\";\n}\n\nconst mkcolor = (primary, secondary, spots) => ({ primary, secondary, spots });\nconst COLORS = [\n  mkcolor(\"#E1F2FF\", \"#17D1AA\", \"#A80B32\"),\n  mkcolor(\"#E1F2FF\", \"#FA5380\", \"#0833B2\"),\n  mkcolor(\"#E1F2FF\", \"#F06EF5\", \"#0804F7\"),\n  mkcolor(\"#E1F2FF\", \"#EBB687\", \"#852D62\"),\n  mkcolor(\"#E1F2FF\", \"#F59F9A\", \"#085F48\"),\n];\n\nfunction createBlockiesIcon(seed) {\n  const colorIdx = Object(_coreUtils__WEBPACK_IMPORTED_MODULE_5__[\"hexToBytes\"])(seed)[0] % COLORS.length;\n  const color = COLORS[colorIdx];\n  return Object(_download_blockies__WEBPACK_IMPORTED_MODULE_2__[\"createIcon\"])({\n    seed,\n    size: 7,\n    scale: 5,\n    bgcolor: color.primary,\n    color: color.secondary,\n    spotcolor: color.spots,\n  });\n}\n\ntoggleSpinner(\"show\");\n\nfunction onApiConnectied(api) {\n  toggleSpinner(\"hide\");\n  let walletDisplay = \"an anonymous Yoroi Wallet\";\n\n  api.experimental.setReturnType(returnType);\n\n  const auth = api.experimental.auth && api.experimental.auth();\n  const authEnabled = auth && auth.isEnabled();\n\n  if (authEnabled) {\n    const walletId = auth.getWalletId();\n    const pubkey = auth.getWalletPubkey();\n    console.log(\n      \"Auth acquired successfully: \",\n      JSON.stringify({ walletId, pubkey })\n    );\n    const walletPlate = Object(_emurgo_cip4_js__WEBPACK_IMPORTED_MODULE_1__[\"textPartFromWalletChecksumImagePart\"])(walletId);\n    walletDisplay = `Yoroi Wallet ${walletPlate}`;\n    walletIconSpan.appendChild(createBlockiesIcon(walletId));\n  }\n\n  alertSuccess(`You have access to ${walletDisplay} now`);\n  walletPlateSpan.innerHTML = walletDisplay;\n  toggleConnectionUI(\"status\");\n  accessGranted = true;\n  window.cardanoApi = cardanoApi = api;\n\n  api.experimental.onDisconnect(() => {\n    alertWarning(`Disconnected from ${walletDisplay}`);\n    toggleConnectionUI(\"button\");\n    walletPlateSpan.innerHTML = \"\";\n    walletIconSpan.innerHTML = \"\";\n  });\n\n  if (authEnabled) {\n    console.log(\"Testing auth signatures\");\n    const messageJson = JSON.stringify({\n      type: \"this is a random test message object\",\n      rndValue: Math.random(),\n    });\n    const messageHex = Object(_coreUtils__WEBPACK_IMPORTED_MODULE_5__[\"bytesToHex\"])(messageJson);\n    console.log(\n      \"Signing randomized message: \",\n      JSON.stringify({\n        messageJson,\n        messageHex,\n      })\n    );\n    const start = performance.now();\n    auth.signHexPayload(messageHex).then(\n      (sig) => {\n        const elapsed = performance.now() - start;\n        console.log(`Signature created in ${elapsed} ms`);\n        console.log(\"Signature received: \", sig);\n        console.log(\"Verifying signature against the message\");\n        auth.checkHexPayload(messageHex, sig).then(\n          (r) => {\n            console.log(\"Signature matches message: \", r);\n          },\n          (e) => {\n            console.error(\"Sig check failed\", e);\n          }\n        );\n      },\n      (err) => {\n        console.error(\"Sig failed\", err);\n      }\n    );\n  }\n}\n\nfunction reduceWasmMultiasset(multiasset, reducer, initValue) {\n  let result = initValue;\n  if (multiasset) {\n    const policyIds = multiasset.keys();\n    for (let i = 0; i < policyIds.len(); i++) {\n      const policyId = policyIds.get(i);\n      const assets = multiasset.get(policyId);\n      const assetNames = assets.keys();\n      for (let j = 0; j < assetNames.len(); j++) {\n        const name = assetNames.get(j);\n        const amount = assets.get(name);\n        const policyIdHex = Object(_coreUtils__WEBPACK_IMPORTED_MODULE_5__[\"bytesToHex\"])(policyId.to_bytes());\n        const encodedName = Object(_coreUtils__WEBPACK_IMPORTED_MODULE_5__[\"bytesToHex\"])(name.name());\n        result = reducer(result, {\n          policyId: policyIdHex,\n          name: encodedName,\n          amount: amount.to_str(),\n          assetId: `${policyIdHex}.${encodedName}`,\n        });\n      }\n    }\n  }\n  return result;\n}\n\ncardanoAccessBtn.addEventListener(\"click\", () => {\n  toggleSpinner(\"show\");\n  const requestIdentification = false;\n  cardano.yoroi.enable({ requestIdentification }).then(\n    function (api) {\n      onApiConnectied(api);\n    },\n    function (err) {\n      toggleSpinner(\"hide\");\n      alertError(`Error: ${JSON.stringify(err)}`);\n    }\n  );\n});\n\n\nsignTx.addEventListener(\"click\", () => {\n  toggleSpinner(\"show\");\n\n  if (!accessGranted) {\n    alertError(\"Should request access first\");\n    return;\n  }\n\n  unsignedTransactionHex = document.location.hash.replace(/^#/, '')\n\n  if (!unsignedTransactionHex) {\n    if (!utxos) {\n      alertError(\"Should request utxos first\");\n      return;\n    }\n\n    if (!changeAddress) {\n      alertError(\"Should request change address first\");\n    }\n\n    const txBuilder = _emurgo_cardano_serialization_lib_browser__WEBPACK_IMPORTED_MODULE_0__[\"TransactionBuilder\"].new(\n      _emurgo_cardano_serialization_lib_browser__WEBPACK_IMPORTED_MODULE_0__[\"TransactionBuilderConfigBuilder\"].new()\n        // all of these are taken from the mainnet genesis settings\n        // linear fee parameters (a*size + b)\n        .fee_algo(\n          _emurgo_cardano_serialization_lib_browser__WEBPACK_IMPORTED_MODULE_0__[\"LinearFee\"].new(\n            _emurgo_cardano_serialization_lib_browser__WEBPACK_IMPORTED_MODULE_0__[\"BigNum\"].from_str(\"44\"),\n            _emurgo_cardano_serialization_lib_browser__WEBPACK_IMPORTED_MODULE_0__[\"BigNum\"].from_str(\"155381\")\n          )\n        )\n        .coins_per_utxo_word(_emurgo_cardano_serialization_lib_browser__WEBPACK_IMPORTED_MODULE_0__[\"BigNum\"].from_str(\"34482\"))\n        .pool_deposit(_emurgo_cardano_serialization_lib_browser__WEBPACK_IMPORTED_MODULE_0__[\"BigNum\"].from_str(\"500000000\"))\n        .key_deposit(_emurgo_cardano_serialization_lib_browser__WEBPACK_IMPORTED_MODULE_0__[\"BigNum\"].from_str(\"2000000\"))\n        .max_value_size(5000)\n        .max_tx_size(16384)\n        .build()\n    );\n\n    // add a keyhash input - for ADA held in a Shelley-era normal address (Base, Enterprise, Pointer)\n    const utxo = utxos.reduce(\n      (prev, curr) => BigInt(prev.amount) > BigInt(curr.amount) ? prev : curr\n    );\n\n    const assets = _emurgo_cardano_serialization_lib_browser__WEBPACK_IMPORTED_MODULE_0__[\"MultiAsset\"].new();\n    for (const asset of utxo.assets) {\n      const policyId = _emurgo_cardano_serialization_lib_browser__WEBPACK_IMPORTED_MODULE_0__[\"ScriptHash\"].from_hex(asset.policyId);\n      const policyContent = assets.get(policyId) || _emurgo_cardano_serialization_lib_browser__WEBPACK_IMPORTED_MODULE_0__[\"Assets\"].new();\n      policyContent.insert(\n        _emurgo_cardano_serialization_lib_browser__WEBPACK_IMPORTED_MODULE_0__[\"AssetName\"].new(Buffer.from(asset.name, 'hex')),\n        _emurgo_cardano_serialization_lib_browser__WEBPACK_IMPORTED_MODULE_0__[\"BigNum\"].from_str(asset.amount)\n      );\n      assets.insert(policyId, policyContent);\n    }\n\n    const addr = _emurgo_cardano_serialization_lib_browser__WEBPACK_IMPORTED_MODULE_0__[\"Address\"].from_bech32(utxo.receiver);\n\n    const baseAddr = _emurgo_cardano_serialization_lib_browser__WEBPACK_IMPORTED_MODULE_0__[\"BaseAddress\"].from_address(addr);\n    const keyHash = baseAddr.payment_cred().to_keyhash();\n    txBuilder.add_key_input(\n      keyHash,\n      _emurgo_cardano_serialization_lib_browser__WEBPACK_IMPORTED_MODULE_0__[\"TransactionInput\"].new(\n        _emurgo_cardano_serialization_lib_browser__WEBPACK_IMPORTED_MODULE_0__[\"TransactionHash\"].from_bytes(Object(_coreUtils__WEBPACK_IMPORTED_MODULE_5__[\"hexToBytes\"])(utxo.tx_hash)), // tx hash\n        utxo.tx_index // index\n      ),\n      _emurgo_cardano_serialization_lib_browser__WEBPACK_IMPORTED_MODULE_0__[\"Value\"].new_with_assets(\n        _emurgo_cardano_serialization_lib_browser__WEBPACK_IMPORTED_MODULE_0__[\"BigNum\"].from_str(utxo.amount),\n        assets\n      )\n    );\n\n    const shelleyOutputAddress =\n      _emurgo_cardano_serialization_lib_browser__WEBPACK_IMPORTED_MODULE_0__[\"Address\"].from_bech32(SEND_TO_ADDRESS);\n    const shelleyChangeAddress = _emurgo_cardano_serialization_lib_browser__WEBPACK_IMPORTED_MODULE_0__[\"Address\"].from_bech32(changeAddress);\n\n    // add output to the tx\n    txBuilder.add_output(\n      _emurgo_cardano_serialization_lib_browser__WEBPACK_IMPORTED_MODULE_0__[\"TransactionOutput\"].new(\n        shelleyOutputAddress,\n        _emurgo_cardano_serialization_lib_browser__WEBPACK_IMPORTED_MODULE_0__[\"Value\"].new(_emurgo_cardano_serialization_lib_browser__WEBPACK_IMPORTED_MODULE_0__[\"BigNum\"].from_str(AMOUNT_TO_SEND))\n      )\n    );\n\n    const ttl = Object(_utils__WEBPACK_IMPORTED_MODULE_3__[\"getTtl\"])();\n    txBuilder.set_ttl(ttl);\n\n    // calculate the min fee required and send any change to an address\n    txBuilder.add_change_if_needed(shelleyChangeAddress);\n\n    unsignedTransactionHex = Object(_coreUtils__WEBPACK_IMPORTED_MODULE_5__[\"bytesToHex\"])(txBuilder.build_tx().to_bytes());\n  }\n\n  // Experimental feature, false by default, in which case only the witness set is returned.\n  const returnTx = true;\n\n  cardanoApi\n    .signTx({\n      tx: unsignedTransactionHex,\n      returnTx,\n    })\n    .then((responseHex) => {\n      toggleSpinner(\"hide\");\n      console.log(`[signTx] response: ${responseHex}`);\n\n      if (returnTx) {\n        const signedTx = _emurgo_cardano_serialization_lib_browser__WEBPACK_IMPORTED_MODULE_0__[\"Transaction\"].from_bytes(\n          Object(_coreUtils__WEBPACK_IMPORTED_MODULE_5__[\"hexToBytes\"])(responseHex)\n        );\n        const wit = signedTx.witness_set();\n\n        const wkeys = wit.vkeys();\n        for (let i = 0; i < wkeys.len(); i++) {\n          const wk = wkeys.get(i);\n          const vk = wk.vkey();\n          console.log(`[signTx] wit vkey ${i}:`, {\n            vkBytes: Object(_coreUtils__WEBPACK_IMPORTED_MODULE_5__[\"bytesToHex\"])(vk.to_bytes()),\n            vkPubBech: vk.public_key().to_bech32(),\n            vkPubHashBech: vk\n              .public_key()\n              .hash()\n              .to_bech32(_yoroi_extension_app_config_stringConfig__WEBPACK_IMPORTED_MODULE_4__[\"Bech32Prefix\"].PAYMENT_KEY_HASH),\n          });\n        }\n\n        transactionHex = responseHex;\n      } else {\n        const witnessSet = _emurgo_cardano_serialization_lib_browser__WEBPACK_IMPORTED_MODULE_0__[\"TransactionWitnessSet\"].from_bytes(\n          Object(_coreUtils__WEBPACK_IMPORTED_MODULE_5__[\"hexToBytes\"])(responseHex)\n        );\n        const tx = _emurgo_cardano_serialization_lib_browser__WEBPACK_IMPORTED_MODULE_0__[\"Transaction\"].from_bytes(\n          Object(_coreUtils__WEBPACK_IMPORTED_MODULE_5__[\"hexToBytes\"])(unsignedTransactionHex)\n        );\n        const transaction = _emurgo_cardano_serialization_lib_browser__WEBPACK_IMPORTED_MODULE_0__[\"Transaction\"].new(\n          tx.body(),\n          witnessSet,\n          tx.auxiliary_data()\n        );\n        transactionHex = Object(_coreUtils__WEBPACK_IMPORTED_MODULE_5__[\"bytesToHex\"])(transaction.to_bytes());\n      }\n      unsignedTransactionHex = null;\n\n      const { vkey, signature } = _emurgo_cardano_serialization_lib_browser__WEBPACK_IMPORTED_MODULE_0__[\"Transaction\"].from_hex(transactionHex).to_js_value().witness_set.vkeys[0];\n      const vkeyHex = _emurgo_cardano_serialization_lib_browser__WEBPACK_IMPORTED_MODULE_0__[\"Vkey\"].from_json(`\"${vkey}\"`).to_hex();\nconst wf = `\n{\n    \"type\": \"TxWitness AlonzoEra\",\n    \"description\": \"\",\n    \"cborHex\": \"820082${vkeyHex}5840${signature}\"\n}\n`      \n\n      alertSuccess(wf);\n    })\n    .catch((error) => {\n      console.error(error);\n      toggleSpinner(\"hide\");\n      alertWarning(\"Signing tx fails\");\n    });\n});\n\nfunction alertError(text) {\n  toggleSpinner(\"hide\");\n  alertEl.className = \"alert alert-danger overflow-auto\";\n  alertEl.innerHTML = text;\n}\n\nfunction alertSuccess(text) {\n  alertEl.className = \"alert alert-success overflow-auto\";\n  alertEl.innerHTML = text;\n}\n\nfunction hideAlert() {\n  alertEl.className = \"d-none\";\n  alert.innerHTML = \"\";\n}\n\nfunction alertWarning(text) {\n  alertEl.className = \"alert alert-warning\";\n  alertEl.innerHTML = text;\n}\n\nfunction toggleSpinner(status) {\n  if (status === \"show\") {\n    spinner.className = \"spinner-border\";\n    alertEl.className = \"d-none\";\n  } else {\n    spinner.className = \"d-none\";\n  }\n}\n\nfunction toggleConnectionUI(status) {\n  if (status === \"button\") {\n    connectionStatus.classList.add(\"d-none\");\n    cardanoAccessBtnRow.classList.remove(\"d-none\");\n  } else {\n    cardanoAccessBtnRow.classList.add(\"d-none\");\n    connectionStatus.classList.remove(\"d-none\");\n  }\n}\n\nfunction selectUtxo(e) {\n  if (!e.target.id) {\n    alertError(\"Invalid idx\");\n    return;\n  }\n  selectedUtxoIdx = e.target.id;\n  hideAlert();\n  renderUtxo();\n}\n\nfunction renderUtxo() {\n  let utxosHTML = \"\";\n  for (let idx in utxos) {\n    const utxo = utxos[idx];\n    const amountInADA = Number(utxo.amount) / 1000000;\n    const numOfAssets = utxo.assets.length;\n\n    utxosHTML += `\n      <li id='${idx}' class=\"utxo-item list-group-item d-flex justify-content-between align-items-center ${\n      selectedUtxoIdx == idx && \"bg-primary text-white\"\n    }\" style='cursor: pointer;'>\n          <p id='${idx}' class='mb-0'>${utxo.utxo_id.slice(0, 25)}</p>\n          <div>\n            ${numOfAssets ? `<span class=\"badge bg-primary rounded-pill\">${utxo.assets.length} Assets</span>` : ''}\n            <span class=\"badge bg-primary rounded-pill\">${amountInADA} ADA</span>\n          </div>\n      </li>\n    `;\n  }\n\n  utxosHTML += `\n    <input class=\"w-100 mt-3 p-1\" placeholder=\"Receiver addresss...\" type=\"text\" id=\"create-tx-receiver\" />\n    <button id=\"create-tx\" class=\"btn btn-light mt-3 w-100\">[Experimental] Create Tx</button>\n  `;\n  utxosContainer.innerHTML = utxosHTML;\n  utxosContainer.classList.remove(\"d-none\");\n  utxosContainer.classList.add(\n    \"d-block\",\n    \"list-group\",\n    \"list-group-numbered\",\n    \"mb-5\"\n  );\n  // Add select utxo handler for each list item\n  getAll(\".utxo-item\").forEach((el) => {\n    el.addEventListener(\"click\", selectUtxo);\n  });\n\n  // Add event handler for create tx button\n  get(\"#create-tx\").addEventListener(\"click\", createTxHandler);\n}\n\nfunction createTxHandler(e) {\n  toggleSpinner(\"show\");\n\n  if (!accessGranted) {\n    alertError(\"Should request access first\");\n    return;\n  }\n\n  if (!utxos || utxos.length === 0) {\n    alertError(\"Should request utxos first\");\n    return;\n  }\n\n  if (!usedAddresses || usedAddresses.length === 0) {\n    alertError(\"Should request used addresses first\");\n    return;\n  }\n\n  const selectedUtxo = utxos[selectedUtxoIdx];\n  if (!selectedUtxo) {\n    alertError(\"No utxo selected\");\n    return;\n  }\n\n  console.log(\"[createTx] Including random utxo input: \", selectedUtxo);\n\n  const usedAddress = usedAddresses[0];\n  const keyHash = _emurgo_cardano_serialization_lib_browser__WEBPACK_IMPORTED_MODULE_0__[\"BaseAddress\"].from_address(\n    _emurgo_cardano_serialization_lib_browser__WEBPACK_IMPORTED_MODULE_0__[\"Address\"].from_bech32(usedAddress)\n  )\n    .payment_cred()\n    .to_keyhash();\n\n  const keyHashBech = keyHash.to_bech32(_yoroi_extension_app_config_stringConfig__WEBPACK_IMPORTED_MODULE_4__[\"Bech32Prefix\"].PAYMENT_KEY_HASH);\n\n  const scripts = _emurgo_cardano_serialization_lib_browser__WEBPACK_IMPORTED_MODULE_0__[\"NativeScripts\"].new();\n  scripts.add(\n    _emurgo_cardano_serialization_lib_browser__WEBPACK_IMPORTED_MODULE_0__[\"NativeScript\"].new_script_pubkey(\n      _emurgo_cardano_serialization_lib_browser__WEBPACK_IMPORTED_MODULE_0__[\"ScriptPubkey\"].new(keyHash)\n    )\n  );\n  scripts.add(\n    _emurgo_cardano_serialization_lib_browser__WEBPACK_IMPORTED_MODULE_0__[\"NativeScript\"].new_timelock_start(\n      _emurgo_cardano_serialization_lib_browser__WEBPACK_IMPORTED_MODULE_0__[\"TimelockStart\"].new(42)\n    )\n  );\n\n  const mintScript = _emurgo_cardano_serialization_lib_browser__WEBPACK_IMPORTED_MODULE_0__[\"NativeScript\"].new_script_all(\n    _emurgo_cardano_serialization_lib_browser__WEBPACK_IMPORTED_MODULE_0__[\"ScriptAll\"].new(scripts)\n  );\n  const mintScriptHex = Object(_coreUtils__WEBPACK_IMPORTED_MODULE_5__[\"bytesToHex\"])(mintScript.to_bytes());\n\n  function convertAssetNameToHEX(name) {\n    return Object(_coreUtils__WEBPACK_IMPORTED_MODULE_5__[\"bytesToHex\"])(name);\n  }\n\n  const tokenAssetName = \"V42\";\n  const nftAssetName = `V42/NFT#${Math.floor(Math.random() * 1000000000)}`;\n  const tokenAssetNameHex = convertAssetNameToHEX(tokenAssetName);\n  const nftAssetNameHex = convertAssetNameToHEX(nftAssetName);\n\n  const expectedPolicyId = Object(_coreUtils__WEBPACK_IMPORTED_MODULE_5__[\"bytesToHex\"])(mintScript.hash().to_bytes());\n\n  console.log(\"[createTx] Including mint request: \", {\n    keyHashBech,\n    mintScriptHex,\n    assetNameHex: tokenAssetNameHex,\n    expectedPolicyId,\n  });\n\n  let receiver = get('#create-tx-receiver').value || selectedUtxo.receiver;\n  const outputHex = Object(_coreUtils__WEBPACK_IMPORTED_MODULE_5__[\"bytesToHex\"])(\n    _emurgo_cardano_serialization_lib_browser__WEBPACK_IMPORTED_MODULE_0__[\"TransactionOutput\"].new(\n      _emurgo_cardano_serialization_lib_browser__WEBPACK_IMPORTED_MODULE_0__[\"Address\"].from_bech32(receiver),\n      _emurgo_cardano_serialization_lib_browser__WEBPACK_IMPORTED_MODULE_0__[\"Value\"].new(_emurgo_cardano_serialization_lib_browser__WEBPACK_IMPORTED_MODULE_0__[\"BigNum\"].from_str(\"1000000\"))\n    ).to_bytes()\n  );\n\n  const includeInputs = [];\n  const includeOutputs = [];\n  const includeTargets = [];\n\n  let targetAddress = receiver;\n  let targetDataHash = null;\n\n  /****** FLAGS ******/\n  let includeDefaultInputs = true;\n  let includeDefaultOutputs = true;\n  let includeDefaultTargets = true;\n  let includeAssetTargets = true;\n  //-----------------//\n  const nativeScriptInputUtxoId = null;\n  const plutusScriptInputUtxoId = null;\n  const createPlutusTarget = false;\n  /****** </FLAGS> ******/\n\n  if (includeDefaultInputs) {\n    includeInputs.push(selectedUtxo.utxo_id);\n  }\n\n  // noinspection StatementWithEmptyBodyJS\n  if (includeDefaultOutputs) {\n    includeOutputs.push(outputHex);\n  }\n\n  // noinspection PointlessBooleanExpressionJS\n  if (nativeScriptInputUtxoId != null) {\n    const nscripts = _emurgo_cardano_serialization_lib_browser__WEBPACK_IMPORTED_MODULE_0__[\"NativeScripts\"].new();\n    nscripts.add(\n      _emurgo_cardano_serialization_lib_browser__WEBPACK_IMPORTED_MODULE_0__[\"NativeScript\"].new_timelock_start(\n        _emurgo_cardano_serialization_lib_browser__WEBPACK_IMPORTED_MODULE_0__[\"TimelockStart\"].new(1234)\n      )\n    );\n    nscripts.add(\n      _emurgo_cardano_serialization_lib_browser__WEBPACK_IMPORTED_MODULE_0__[\"NativeScript\"].new_timelock_start(\n        _emurgo_cardano_serialization_lib_browser__WEBPACK_IMPORTED_MODULE_0__[\"TimelockStart\"].new(1)\n      )\n    );\n    const nativeScript = _emurgo_cardano_serialization_lib_browser__WEBPACK_IMPORTED_MODULE_0__[\"NativeScript\"].new_script_all(\n      _emurgo_cardano_serialization_lib_browser__WEBPACK_IMPORTED_MODULE_0__[\"ScriptAll\"].new(nscripts)\n    );\n\n    const scriptHash = nativeScript.hash();\n    console.log(\n      `[createTx] Native script hash: ${Object(_coreUtils__WEBPACK_IMPORTED_MODULE_5__[\"bytesToHex\"])(scriptHash.to_bytes())}`\n    );\n    const nativeScriptAddress = _emurgo_cardano_serialization_lib_browser__WEBPACK_IMPORTED_MODULE_0__[\"EnterpriseAddress\"].new(\n      0,\n      _emurgo_cardano_serialization_lib_browser__WEBPACK_IMPORTED_MODULE_0__[\"StakeCredential\"].from_scripthash(scriptHash)\n    )\n      .to_address()\n      .to_bech32();\n    console.log(`[createTx] Native script address: ${nativeScriptAddress}`);\n\n    includeInputs.push({\n      id: nativeScriptInputUtxoId,\n      witness: {\n        nativeScript: Object(_coreUtils__WEBPACK_IMPORTED_MODULE_5__[\"bytesToHex\"])(nativeScript.to_bytes()),\n      },\n    });\n  }\n\n  // noinspection PointlessBooleanExpressionJS\n  if (plutusScriptInputUtxoId != null || createPlutusTarget) {\n    const plutusScript = _emurgo_cardano_serialization_lib_browser__WEBPACK_IMPORTED_MODULE_0__[\"PlutusScript\"].from_bytes(\n      Object(_coreUtils__WEBPACK_IMPORTED_MODULE_5__[\"hexToBytes\"])(\"4e4d01000033222220051200120011\")\n    );\n\n    const plutusScriptHash = plutusScript.hash();\n    console.log(\n      `[createTx] Plutus script hash: ${Object(_coreUtils__WEBPACK_IMPORTED_MODULE_5__[\"bytesToHex\"])(\n        plutusScriptHash.to_bytes()\n      )}`\n    );\n    const plutusScriptAddress = _emurgo_cardano_serialization_lib_browser__WEBPACK_IMPORTED_MODULE_0__[\"EnterpriseAddress\"].new(\n      0,\n      _emurgo_cardano_serialization_lib_browser__WEBPACK_IMPORTED_MODULE_0__[\"StakeCredential\"].from_scripthash(plutusScriptHash)\n    )\n      .to_address()\n      .to_bech32();\n    console.log(`[createTx] Plutus script address: ${plutusScriptAddress}`);\n\n    const datum = _emurgo_cardano_serialization_lib_browser__WEBPACK_IMPORTED_MODULE_0__[\"PlutusData\"].new_empty_constr_plutus_data(\n      _emurgo_cardano_serialization_lib_browser__WEBPACK_IMPORTED_MODULE_0__[\"BigNum\"].zero()\n    );\n    const datumHash = Object(_coreUtils__WEBPACK_IMPORTED_MODULE_5__[\"bytesToHex\"])(\n      _emurgo_cardano_serialization_lib_browser__WEBPACK_IMPORTED_MODULE_0__[\"hash_plutus_data\"](datum).to_bytes()\n    );\n    console.log(`[createTx] Plutus datum hash: ${datumHash}`);\n\n    if (createPlutusTarget) {\n      targetAddress = plutusScriptAddress;\n      targetDataHash = datumHash;\n    }\n\n    // noinspection PointlessBooleanExpressionJS\n    if (plutusScriptInputUtxoId != null) {\n      const redeemer = _emurgo_cardano_serialization_lib_browser__WEBPACK_IMPORTED_MODULE_0__[\"Redeemer\"].new(\n        _emurgo_cardano_serialization_lib_browser__WEBPACK_IMPORTED_MODULE_0__[\"RedeemerTag\"].new_spend(),\n        _emurgo_cardano_serialization_lib_browser__WEBPACK_IMPORTED_MODULE_0__[\"BigNum\"].zero(),\n        _emurgo_cardano_serialization_lib_browser__WEBPACK_IMPORTED_MODULE_0__[\"PlutusData\"].new_empty_constr_plutus_data(\n          _emurgo_cardano_serialization_lib_browser__WEBPACK_IMPORTED_MODULE_0__[\"BigNum\"].zero()\n        ),\n        _emurgo_cardano_serialization_lib_browser__WEBPACK_IMPORTED_MODULE_0__[\"ExUnits\"].new(\n          _emurgo_cardano_serialization_lib_browser__WEBPACK_IMPORTED_MODULE_0__[\"BigNum\"].from_str(\"1700\"),\n          _emurgo_cardano_serialization_lib_browser__WEBPACK_IMPORTED_MODULE_0__[\"BigNum\"].from_str(\"476468\")\n        )\n      );\n\n      includeInputs.push({\n        id: plutusScriptInputUtxoId,\n        witness: {\n          plutusScript: Object(_coreUtils__WEBPACK_IMPORTED_MODULE_5__[\"bytesToHex\"])(plutusScript.to_bytes()),\n          datum: Object(_coreUtils__WEBPACK_IMPORTED_MODULE_5__[\"bytesToHex\"])(datum.to_bytes()),\n          redeemer: Object(_coreUtils__WEBPACK_IMPORTED_MODULE_5__[\"bytesToHex\"])(redeemer.to_bytes()),\n        },\n      });\n    }\n  }\n\n  if (includeDefaultTargets) {\n    includeTargets.push({\n      address: targetAddress,\n      value: \"2000000\",\n      dataHash: targetDataHash,\n      mintRequest: [\n        {\n          script: mintScriptHex,\n          assetName: tokenAssetNameHex,\n          amount: \"42\",\n        },\n        {\n          script: mintScriptHex,\n          storeScriptOnChain: true,\n          assetName: nftAssetNameHex,\n          metadata: {\n            tag: 721,\n            json: JSON.stringify({\n              name: nftAssetName,\n              description: `V42 NFT Collection`,\n              mediaType: \"image/png\",\n              image: \"ipfs://QmRhTTbUrPYEw3mJGGhQqQST9k86v1DPBiTTWJGKDJsVFw\",\n              files: [\n                {\n                  name: nftAssetName,\n                  mediaType: \"image/png\",\n                  src: \"ipfs://QmRhTTbUrPYEw3mJGGhQqQST9k86v1DPBiTTWJGKDJsVFw\",\n                },\n              ],\n            }),\n          },\n        },\n      ],\n    });\n  }\n\n  const txReq = {\n    validityIntervalStart: 2000,\n    includeInputs,\n    includeOutputs,\n    includeTargets,\n  };\n\n  if (includeAssetTargets) {\n    const utxosWithAssets = utxos.filter((u) => u.assets.length > 0);\n    const utxoWithAssets =\n      utxosWithAssets[Math.floor(Math.random() * utxosWithAssets.length)];\n\n    if (utxoWithAssets) {\n      const asset = utxoWithAssets.assets[0];\n      console.log(\"[createTx] Including asset:\", asset);\n      txReq.includeTargets.push({\n        // do not specify value, the connector will use minimum value\n        address: receiver,\n        assets: {\n          [asset.assetId]: \"1\",\n        },\n        ensureRequiredMinimalValue: true,\n      });\n    }\n  }\n\n  cardanoApi.experimental\n    .createTx(txReq, true)\n    .then((txHex) => {\n      const createdTx = _emurgo_cardano_serialization_lib_browser__WEBPACK_IMPORTED_MODULE_0__[\"Transaction\"].from_bytes(Buffer.from(txHex, 'hex'));\n      // add `keyHash`, which is one of the conditions of the witness script, to\n      // required signers list of the created tx, so that later the sign tx API will\n      // sign with this key\n      const createdBody = createdTx.body();\n      const requiredSigners = _emurgo_cardano_serialization_lib_browser__WEBPACK_IMPORTED_MODULE_0__[\"Ed25519KeyHashes\"].new();\n      requiredSigners.add(keyHash);\n      createdBody.set_required_signers(requiredSigners);\n      const newTx = _emurgo_cardano_serialization_lib_browser__WEBPACK_IMPORTED_MODULE_0__[\"Transaction\"].new(\n        createdBody,\n        createdTx.witness_set(),\n        createdTx.auxiliary_data(),\n      );\n\n      toggleSpinner(\"hide\");\n      alertSuccess(`<p> Creating tx succeeds: ${txHex} <p/>`);\n      unsignedTransactionHex = newTx.to_hex();\n    })\n    .catch((error) => {\n      console.error(error);\n      toggleSpinner(\"hide\");\n      alertWarning(\"Creating tx fails\");\n    });\n}\n\n\nfunction renderJonsResponse(title, response) {\n  alertSuccess(\n    `<h2>${title}:</h2><pre>` +\n      JSON.stringify(response, undefined, 2) +\n      \"</pre>\"\n  );\n}\n\nconst onload = () => {\n  if (typeof window.cardano === \"undefined\") {\n    alertError(\"Cardano API not found\");\n  } else {\n    console.log(\"Cardano API detected, checking connection status\");\n    cardano.yoroi\n      .enable({ requestIdentification: true, onlySilent: true })\n      .then(\n        (api) => {\n          console.log(\"successful silent reconnection\");\n          onApiConnectied(api);\n        },\n        (err) => {\n          if (String(err).includes(\"onlySilent:fail\")) {\n            console.log(\"no silent re-connection available\");\n          } else {\n            console.error(\n              \"Silent reconnection failed for unknown reason!\",\n              err\n            );\n          }\n          toggleSpinner(\"hide\");\n          toggleConnectionUI(\"button\");\n        }\n      );\n  }\n};\n\nsetTimeout(onload, 100);\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/buffer/index.js */ \"./node_modules/buffer/index.js\").Buffer))\n\n//# sourceURL=webpack:///./index.js?");

/***/ }),

/***/ "./node_modules/@emurgo/cardano-serialization-lib-browser sync recursive":
/*!*********************************************************************!*\
  !*** ./node_modules/@emurgo/cardano-serialization-lib-browser sync ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = \"./node_modules/@emurgo/cardano-serialization-lib-browser sync recursive\";\n\n//# sourceURL=webpack:///./node_modules/@emurgo/cardano-serialization-lib-browser_sync?");

/***/ }),

/***/ "./utils.js":
/*!******************!*\
  !*** ./utils.js ***!
  \******************/
/*! exports provided: getTtl */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getTtl\", function() { return getTtl; });\n/* harmony import */ var bignumber_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! bignumber.js */ \"./node_modules/bignumber.js/bignumber.js\");\n/* harmony import */ var bignumber_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(bignumber_js__WEBPACK_IMPORTED_MODULE_0__);\n\n\nfunction getTtl() {\n  const fullConfig = [\n    {\n      \"StartAt\": 0,\n      \"ChainNetworkId\": \"0\",\n      \"ByronNetworkId\": 1097911063,\n      \"GenesisDate\": \"1563999616000\",\n      \"SlotsPerEpoch\": 21600,\n      \"SlotDuration\": 20\n    },\n    {\n      \"StartAt\": 74,\n      \"SlotsPerEpoch\": 432000,\n      \"SlotDuration\": 1,\n      \"PerEpochPercentageReward\": 69344,\n      \"LinearFee\": {\n        \"coefficient\": \"44\",\n        \"constant\": \"155381\"\n      },\n      \"MinimumUtxoVal\": \"1000000\",\n      \"PoolDeposit\": \"500000000\",\n      \"KeyDeposit\": \"2000000\"\n    }\n  ]\n  /* mainnet: \n  const fullConfig = [\n    {\n      \"StartAt\": 0,\n      \"ChainNetworkId\": \"1\",\n      \"ByronNetworkId\": 764824073,\n      \"GenesisDate\": \"1506203091000\",\n      \"SlotsPerEpoch\": 21600,\n      \"SlotDuration\": 20\n    },\n    {\n      \"StartAt\": 208,\n      \"SlotsPerEpoch\": 432000,\n      \"SlotDuration\": 1,\n      \"PerEpochPercentageReward\": 69344,\n      \"LinearFee\": {\n        \"coefficient\": \"44\",\n        \"constant\": \"155381\"\n      },\n      \"MinimumUtxoVal\": \"1000000\",\n      \"PoolDeposit\": \"500000000\",\n      \"KeyDeposit\": \"2000000\"\n    }\n  ]\n  */\n  const defaultTtlOffset = 7200;\n  const timeToSlot = genTimeToSlot(fullConfig);\n  const absSlotNumber = new bignumber_js__WEBPACK_IMPORTED_MODULE_0___default.a(timeToSlot({\n    time: new Date(),\n  }).slot);\n\n  return absSlotNumber.plus(defaultTtlOffset).toNumber();\n}\n\nfunction genTimeToSlot(\n  config/*: $ReadOnlyArray<$ReadOnly<{\n    StartAt?: number,\n    GenesisDate?: string,\n    SlotsPerEpoch?: number,\n    SlotDuration?: number,\n    ...,\n  }>>*/,\n)/*: TimeToAbsoluteSlotFunc */ {\n  return (request/*: TimeToAbsoluteSlotRequest*/) => {\n    const { GenesisDate, } = config[0];\n    if (GenesisDate == null) throw new Error(`${nameof(genTimeToSlot)} missing genesis params`);\n    let SlotDuration = config[0].SlotDuration;\n    let SlotsPerEpoch = config[0].SlotsPerEpoch;\n    let timeLeftToTip = (\n      request.time.getTime() - new Date(Number.parseInt(GenesisDate, 10)).getTime()\n    );\n    let slotCount = 0;\n\n    // for pairs of config changes (x, x+1), get the time between these pairs\n    for (let i = 0; i < config.length - 1; i++) {\n      const start = config[i].StartAt;\n      if (start === undefined) {\n        throw new Error(`${nameof(genTimeToSlot)} missing start`);\n      }\n      const end = config[i + 1].StartAt;\n      if (end === undefined) {\n        throw new Error(`${nameof(genTimeToSlot)} missing end`);\n      }\n      const numEpochs = end - start;\n\n      if (SlotDuration == null || SlotsPerEpoch == null) throw new Error(`${nameof(genTimeToSlot)} missing params`);\n\n      // queried time is before the next protocol parameter choice\n      if (timeLeftToTip < (SlotsPerEpoch * SlotDuration * 1000) * numEpochs) {\n        break;\n      }\n      slotCount += SlotsPerEpoch * numEpochs;\n      timeLeftToTip -= (SlotsPerEpoch * SlotDuration * 1000) * numEpochs;\n\n      if (config[i + 1].SlotDuration !== undefined) {\n        SlotDuration = config[i + 1].SlotDuration;\n      }\n      if (config[i + 1].SlotsPerEpoch !== undefined) {\n        SlotsPerEpoch = config[i + 1].SlotsPerEpoch;\n      }\n    }\n\n    if (SlotDuration == null || SlotsPerEpoch == null) throw new Error(`${nameof(genTimeToSlot)} missing params`);\n\n    // find how many slots since the last update\n    const secondsSinceLastUpdate = timeLeftToTip / 1000;\n    slotCount += Math.floor(secondsSinceLastUpdate / SlotDuration);\n\n    const msIntoSlot = timeLeftToTip % 1000;\n    const secondsIntoSlot = secondsSinceLastUpdate % SlotDuration;\n    return {\n      slot: slotCount,\n      msIntoSlot: (1000 * secondsIntoSlot) + msIntoSlot,\n    };\n  };\n}\n\n\n//# sourceURL=webpack:///./utils.js?");

/***/ })

}]);